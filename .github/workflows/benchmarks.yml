name: Performance Benchmarks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  benchmarks:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            os_name: ubuntu
            cmake_preset: ninja-mc
            build_preset: ninja-mc-release
            executable_path: build/ninja-mc/bin/Release/sdl_abstraction_benchmarks
            setup_deps: |
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                ninja-build \
                pkg-config \
                libasound2-dev \
                libx11-dev \
                libxrandr-dev \
                libxi-dev \
                libgl1-mesa-dev \
                libglu1-mesa-dev \
                libxcursor-dev \
                libxinerama-dev \
                libwayland-dev \
                libxkbcommon-dev \
                libegl1-mesa-dev \
                libibus-1.0-dev \
                libudev-dev \
                libdbus-1-dev \
                fcitx-libs-dev \
                xvfb
          - os: windows-latest  
            os_name: windows
            cmake_preset: msvcc
            build_preset: msvcc-release
            executable_path: build/msvcc/bin/Release/sdl_abstraction_benchmarks.exe
            setup_deps: echo "No additional deps needed for Windows"

    runs-on: ${{ matrix.os }}
    env:
      DISPLAY: :99 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        
    - name: Setup dependencies
      run: ${{ matrix.setup_deps }}
      shell: bash
      
    - name: Setup MSVC (Windows only)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install newer CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install newer CMake to ensure --output-junit works properly (requires CMake 3.21.4+)
        CMAKE_VERSION="4.1.1"
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get install -y cmake=${CMAKE_VERSION}* cmake-data=${CMAKE_VERSION}*

    - name: Install newer CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download and install CMake 4.1.1 for Windows
        $CMAKE_VERSION = "4.1.1"
        $CMAKE_URL = "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-windows-x86_64.msi"
        $CMAKE_INSTALLER = "$env:TEMP\cmake-installer.msi"
        
        Write-Host "Downloading CMake $CMAKE_VERSION..."
        Invoke-WebRequest -Uri $CMAKE_URL -OutFile $CMAKE_INSTALLER
        
        Write-Host "Installing CMake $CMAKE_VERSION..."
        Start-Process msiexec.exe -ArgumentList "/i", $CMAKE_INSTALLER, "/quiet", "/norestart" -Wait
        
        # Add CMake to PATH for this session
        $env:PATH = "C:\Program Files\CMake\bin;$env:PATH"
        
        Write-Host "CMake version after installation:"
        cmake --version

    - name: Setup Video Server (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: | 
        Xvfb ${DISPLAY} -screen 0 1024x768x24 &

    - name: Configure CMake
      run: cmake --preset ${{ matrix.cmake_preset }} -DSDLXX_ENABLE_BENCHMARKS=ON
      
    - name: Build benchmarks
      run: cmake --build --preset ${{ matrix.build_preset }} --target sdl_abstraction_benchmarks
      
    - name: Run benchmarks
      run: |
        # Create output directory
        mkdir -p benchmark-results
        
        # Run benchmarks and capture output
        ./${{ matrix.executable_path }} \
          --benchmark_format=json \
          --benchmark_min_time=0.2s \
          --benchmark_repetitions=3 \
          --benchmark_report_aggregates_only=true \
          --benchmark_out=benchmark-results/${{ matrix.os_name }}-results.json \
          --benchmark_out_format=json
          
        # Also generate console output for logs
        ./${{ matrix.executable_path }} \
          --benchmark_format=console \
          --benchmark_min_time=0.2s \
          --benchmark_repetitions=3 \
          --benchmark_report_aggregates_only=true > benchmark-results/${{ matrix.os_name }}-results.txt
      shell: bash
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ matrix.os_name }}
        path: benchmark-results/
        retention-days: 30

  generate-report:
    needs: benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all benchmark artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: benchmark-results-*
        merge-multiple: true
        path: benchmark-results/
        
    - name: Generate benchmark HTML report
      run: |
        # Use CMake to generate the benchmark report
        cmake \
          -DBENCHMARK_RESULTS_DIR="$(pwd)/benchmark-results" \
          -DOUTPUT_DIR="$(pwd)/benchmark-html" \
          -DCOMMIT_SHA="${GITHUB_SHA:0:7}" \
          -P cmake/GenerateBenchmarkReport.cmake
        
    - name: Upload benchmark HTML report
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-html-report
        path: benchmark-html/
        retention-days: 30
