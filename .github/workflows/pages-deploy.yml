name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued
concurrency:
  group: pages-deployment
  cancel-in-progress: false

jobs:
  wait-for-ci:
    name: Wait for CI Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Wait for CI workflow
      uses: fountainhead/action-wait-for-check@v1.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'ubuntu-latest (Debug)'  # Wait for at least one key job
        ref: ${{ github.sha }}
        timeoutSeconds: 1800  # 30 minutes
        intervalSeconds: 30

  wait-for-docs:
    name: Wait for Documentation Generation
    runs-on: ubuntu-latest
    steps:
    - name: Wait for docs workflow
      uses: fountainhead/action-wait-for-check@v1.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'Generate Documentation'
        ref: ${{ github.sha }}
        timeoutSeconds: 900  # 15 minutes
        intervalSeconds: 30

  wait-for-coverage:
    name: Wait for Coverage Generation
    runs-on: ubuntu-latest
    steps:
    - name: Wait for coverage workflow
      uses: fountainhead/action-wait-for-check@v1.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'Generate Coverage Reports'
        ref: ${{ github.sha }}
        timeoutSeconds: 1200  # 20 minutes
        intervalSeconds: 30

  wait-for-benchmarks:
    name: Wait for Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Wait for benchmarks workflow
      uses: fountainhead/action-wait-for-check@v1.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'benchmarks (ubuntu-latest)'  # Wait for at least one platform
        ref: ${{ github.sha }}
        timeoutSeconds: 1800  # 30 minutes
        intervalSeconds: 30

  deploy-pages:
    name: Deploy Combined Content to GitHub Pages
    runs-on: ubuntu-latest
    needs: [wait-for-ci, wait-for-docs, wait-for-coverage, wait-for-benchmarks]
    if: always()  # Run even if some wait jobs fail
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v4

    - name: Create pages directory structure
      run: |
        mkdir -p pages-content

    - name: Download test reports artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: test-report-html
        path: pages-content/test-reports

    - name: Download documentation artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: documentation
        path: pages-content/docs

    - name: Download coverage reports artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: coverage-reports
        path: pages-content/coverage

    - name: Download benchmark reports artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: benchmark-html-report
        path: pages-content/benchmarks

    - name: Create main index page
      run: |
        cat > pages-content/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>SDL Demo - Project Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                .section-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
                .section-card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; background: #fafafa; }
                .section-card h3 { margin-top: 0; color: #333; }
                .section-card p { color: #666; }
                .section-card a { display: inline-block; padding: 10px 20px; background: #007acc; color: white; text-decoration: none; border-radius: 4px; }
                .section-card a:hover { background: #005a9e; }
                .timestamp { color: #666; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>SDL Demo - Project Reports</h1>
                <p class="timestamp">Generated: $(date -u)</p>
                <p>Commit: <code>${GITHUB_SHA:0:8}</code> | Branch: <code>main</code></p>
            </div>
            
            <div class="section-grid">
                <div class="section-card">
                    <h3>ðŸ“Š Test Reports</h3>
                    <p>Interactive test result reports from CI runs across all platforms and configurations.</p>
                    <a href="test-reports/index.html">View Test Reports</a>
                </div>
                
                <div class="section-card">
                    <h3>ðŸ“š API Documentation</h3>
                    <p>Generated Doxygen documentation for the SDL C++ wrapper library.</p>
                    <a href="docs/index.html">View Documentation</a>
                </div>
                
                <div class="section-card">
                    <h3>ðŸ“ˆ Code Coverage</h3>
                    <p>Code coverage reports showing test coverage across the codebase.</p>
                    <a href="coverage/index.html">View Coverage</a>
                </div>
                
                <div class="section-card">
                    <h3>âš¡ Performance Benchmarks</h3>
                    <p>SDL++ wrapper vs pure SDL3 performance comparisons validating zero-overhead abstractions.</p>
                    <a href="benchmarks/index.html">View Benchmarks</a>
                </div>
            </div>
            
            <div style="text-align: center; color: #666; border-top: 1px solid #eee; padding-top: 20px;">
                <p>Automatically generated from <a href="https://github.com/${GITHUB_REPOSITORY}">GitHub repository</a></p>
            </div>
        </body>
        </html>
        EOF

    - name: Show directory structure
      run: |
        echo "Pages content structure:"
        find pages-content -type f | sort

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages-content

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4