name: CI Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  pages: write
  id-token: write

# Allow concurrent CI runs, but cancel previous runs on new commits
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: ${{ matrix.os }} (${{ matrix.config }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        config: [Debug, Release]
        include:
          - os: ubuntu-latest
            preset: ninja-mc
            test_preset: ninja-mc-debug
            cmake_configure_opts: -DSDL_UNIX_CONSOLE_BUILD=ON
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y cmake ninja-build
          - os: windows-latest
            preset: msvcc
            test_preset: msvcc-debug
            cmake_configure_opts: ""
            install_deps: |
              # Windows dependencies are handled by vcpkg or built-in tools
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        ${{ matrix.install_deps }}
        # Install newer CMake to ensure --output-junit works properly (requires CMake 3.21.4+)
        CMAKE_VERSION="4.1.1"
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get install -y cmake=${CMAKE_VERSION}* cmake-data=${CMAKE_VERSION}*

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install newer CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download and install CMake 4.1.1 for Windows
        $CMAKE_VERSION = "4.1.1"
        $CMAKE_URL = "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-windows-x86_64.msi"
        $CMAKE_INSTALLER = "$env:TEMP\cmake-installer.msi"
        
        Write-Host "Downloading CMake $CMAKE_VERSION..."
        Invoke-WebRequest -Uri $CMAKE_URL -OutFile $CMAKE_INSTALLER
        
        Write-Host "Installing CMake $CMAKE_VERSION..."
        Start-Process msiexec.exe -ArgumentList "/i", $CMAKE_INSTALLER, "/quiet", "/norestart" -Wait
        
        # Add CMake to PATH for this session
        $env:PATH = "C:\Program Files\CMake\bin;$env:PATH"
        
        Write-Host "CMake version after installation:"
        cmake --version

    - name: Configure CMake
      run: |
        cmake --preset ${{ matrix.preset }} ${{ matrix.cmake_configure_opts }}

    - name: Build (${{ matrix.config }})
      run: |
        cmake --build --preset ${{ matrix.preset }}-${{ matrix.config == 'Debug' && 'debug' || 'release' }}

    - name: Run Tests (${{ matrix.config }})
      shell: bash
      run: |
        # Use both approaches to ensure we get test results even if one fails
        # Method 1: Try --output-junit (preferred, but may have issues in some CMake versions)
        ctest --preset ${{ matrix.test_preset }} --build-config ${{ matrix.config }} --output-on-failure --output-junit test-results-${{ matrix.os }}-${{ matrix.config }}.xml
        
        # Find the XML file - it's created relative to the CTest working directory (build/preset/)
        XML_FILE="test-results-${{ matrix.os }}-${{ matrix.config }}.xml"
        BUILD_XML_PATH="build/${{ matrix.preset }}/$XML_FILE"
        
        # Check if XML was generated in the build directory
        if [ -f "$BUILD_XML_PATH" ]; then
          echo "Found XML file in build directory: $BUILD_XML_PATH"
          # Copy to root directory for upload step
          cp "$BUILD_XML_PATH" "$XML_FILE"
        elif [ -f "$XML_FILE" ]; then
          echo "Found XML file in current directory: $XML_FILE"
        else
          echo "XML not found, searching all locations..."
          find . -name "$XML_FILE" -type f | head -5
          FOUND_XML=$(find . -name "$XML_FILE" -type f | head -1)
          if [ -n "$FOUND_XML" ]; then
            echo "Found XML file at: $FOUND_XML"
            cp "$FOUND_XML" "$XML_FILE"
          fi
        fi
        
        # Verify we have results to upload and validate XML format
        if [ -f "$XML_FILE" ]; then
          echo "Successfully generated test results XML"
          echo "File size: $(wc -c < $XML_FILE) bytes"
          echo "First few lines:"
          head -10 "$XML_FILE"
          
          # Validate that it's actually JUnit XML format (should have <testsuite> root element)
          if grep -q "<testsuite" "$XML_FILE"; then
            echo "✓ Valid JUnit XML format detected"
            echo "JUNIT_XML_VALID=true" >> $GITHUB_ENV
          else
            echo "⚠ Invalid JUnit XML format - contains non-JUnit XML structure"
            echo "This will cause the dorny/test-reporter to fail with parsing errors"
            echo "JUNIT_XML_VALID=false" >> $GITHUB_ENV
          fi
        else
          echo "Warning: No test results XML was generated"
          echo "JUNIT_XML_VALID=false" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.config }}
        path: test-results-${{ matrix.os }}-${{ matrix.config }}.xml
        retention-days: 30

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always() && env.JUNIT_XML_VALID == 'true'
      with:
        name: Test Results (${{ matrix.os }} ${{ matrix.config }})
        path: test-results-${{ matrix.os }}-${{ matrix.config }}.xml
        reporter: java-junit
        fail-on-error: false

    - name: Skip publishing invalid test results
      if: always() && env.JUNIT_XML_VALID == 'false'
      run: |
        echo "⚠ Skipping test results publishing due to invalid or missing JUnit XML"
        echo "This prevents the TypeError: Cannot read properties of undefined error"
        echo "The XML file either doesn't exist or is not in proper JUnit format"

  # Collect all test results and generate a combined report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        path: test-results

    - name: Install XML processing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y xmlstarlet jq python3-pip
        pip3 install junit2html

    - name: Generate combined test report
      run: |
        # Create output directory
        mkdir -p test-report
        
        # Find all XML files
        find test-results -name "*.xml" -type f | head -10
        
        # Generate HTML report for each XML file
        for xml_file in test-results/*.xml; do
          if [ -f "$xml_file" ]; then
            base_name=$(basename "$xml_file" .xml)
            echo "Processing $xml_file -> test-report/${base_name}.html"
            junit2html --summary-matrix "$xml_file" "test-report/${base_name}.html" || echo "Failed to process $xml_file"
          fi
        done
        
        # Create index.html with links to all reports
        cat > test-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>SDL Demo - Test Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                .platform-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                .platform-card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; background: #fafafa; }
                .platform-card h3 { margin-top: 0; color: #333; }
                .config-links { margin-top: 10px; }
                .config-links a { display: inline-block; margin-right: 15px; padding: 8px 16px; background: #007acc; color: white; text-decoration: none; border-radius: 4px; }
                .config-links a:hover { background: #005a9e; }
                .timestamp { color: #666; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>SDL Demo - Test Reports</h1>
                <p class="timestamp">Generated: $(date -u)</p>
                <p>Commit: <code>${GITHUB_SHA:0:8}</code> | Branch: <code>${GITHUB_REF_NAME}</code></p>
            </div>
            
            <div class="platform-grid">
        EOF
        
        # Add platform sections
        for platform in ubuntu-latest windows-latest; do
          platform_display=$(echo "$platform" | sed 's/-latest//')
          cat >> test-report/index.html << EOF
                <div class="platform-card">
                    <h3>${platform_display^}</h3>
                    <div class="config-links">
        EOF
          
          for config in Debug Release; do
            report_file="test-results-${platform}-${config}.html"
            if [ -f "test-report/$report_file" ]; then
              cat >> test-report/index.html << EOF
                        <a href="$report_file">$config Build</a>
        EOF
            else
              cat >> test-report/index.html << EOF
                        <span style="color: #999;">$config Build (No Results)</span>
        EOF
            fi
          done
          
          cat >> test-report/index.html << 'EOF'
                    </div>
                </div>
        EOF
        done
        
        # Close HTML
        cat >> test-report/index.html << 'EOF'
            </div>
            
            <div style="margin-top: 40px; padding: 20px; background: #f0f8ff; border-radius: 8px;">
                <h3>Navigation</h3>
                <p><a href="../index.html">← Back to Documentation</a></p>
            </div>
        </body>
        </html>
        EOF
        
        echo "Generated test report files:"
        ls -la test-report/

    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report-html
        path: test-report/
        retention-days: 90

